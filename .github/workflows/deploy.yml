name: Build, SAST & Deploy React to Cloudflare Pages

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3Ô∏è‚É£ Notify Discord when build starts
      - name: Notify Discord (Build Started)
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"username\": \"CI/CD Bot\", \"embeds\": [{\"title\": \"üöÄ Build Started\",\"color\": 3447003,\"fields\":[{\"name\":\"Repository\",\"value\":\"${{ github.repository }}\"},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\"},{\"name\":\"Workflow Run\",\"value\":\"[View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}]}]}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm install

      # 5Ô∏è‚É£ Build React app
      - name: Build React app
        run: |
          export NODE_OPTIONS=--openssl-legacy-provider
          npm run build

      # 6Ô∏è‚É£ Run Semgrep SAST using Docker
      - name: Run Semgrep SAST (Docker)
        run: |
          RESULTS_FILE="$GITHUB_WORKSPACE/semgrep-results.json"
          docker run --rm \
            -v "$GITHUB_WORKSPACE:/src" \
            -e SEMGREP_NO_METRICS=1 \
            semgrep/semgrep:latest \
            semgrep scan \
              --config https://semgrep.dev/p/javascript \
              --config https://semgrep.dev/p/react \
              --config https://semgrep.dev/p/security-audit \
              --json \
              --output /src/semgrep-results.json || true

      # 7Ô∏è‚É£ Debug Semgrep output (optional)
      - name: Debug Semgrep Output
        run: |
          echo "Workspace contents:"
          ls -la $GITHUB_WORKSPACE
          echo "Semgrep results file:"
          ls -la $GITHUB_WORKSPACE/semgrep-results.json || echo "File not found"

      # 8Ô∏è‚É£ Notify Discord with Semgrep Results
      - name: Notify Discord (Semgrep Results)
        if: always()
        run: |
          RESULTS_FILE="$GITHUB_WORKSPACE/semgrep-results.json"

          if [ ! -f "$RESULTS_FILE" ]; then
            echo "‚ö†Ô∏è Semgrep results file not found, skipping notification."
            exit 0
          fi

          # Extract findings, rules, files, targets from JSON
          findings=$(jq '.results | length' "$RESULTS_FILE" 2>/dev/null || echo 0)
          rules_detected=$(jq '[.results[].check_id] | unique | length' "$RESULTS_FILE" 2>/dev/null || echo 0)
          files_with_findings=$(jq '[.results[].path] | unique | length' "$RESULTS_FILE" 2>/dev/null || echo 0)
          targets_scanned=$(jq '[.results[].path] | unique | length' "$RESULTS_FILE" 2>/dev/null || echo 0)

          summary="No issues found"
          color=3066993
          if [ "$findings" -gt 0 ]; then
            summary="$findings issue(s) found"
            color=15158332
          fi

          # Send Discord notification
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"username\": \"CI/CD Bot\",
              \"embeds\": [{
                \"title\": \"üõ° Semgrep Scan Report\",
                \"color\": $color,
                \"fields\": [
                  {\"name\":\"Repository\",\"value\":\"${GITHUB_REPOSITORY}\"},
                  {\"name\":\"Branch\",\"value\":\"${GITHUB_REF_NAME}\"},
                  {\"name\":\"Rules with Findings\",\"value\":\"$rules_detected\"},
                  {\"name\":\"Files with Findings\",\"value\":\"$files_with_findings\"},
                  {\"name\":\"Targets Scanned\",\"value\":\"$targets_scanned\"},
                  {\"name\":\"Findings Detected\",\"value\":\"$findings\"},
                  {\"name\":\"Summary\",\"value\":\"$summary\"},
                  {\"name\":\"Workflow Run\",\"value\":\"[View Run](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})\"}
                ]
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      # 9Ô∏è‚É£ Deploy to Cloudflare Pages
      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.CF_PROJECT_NAME }}
          directory: ./build

      # üîü Notify Discord on deployment success
      - name: Notify Discord (Deployment Success)
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"username\": \"CI/CD Bot\", \"embeds\": [{\"title\": \"‚úÖ Deployment Successful\",\"color\": 3066993,\"fields\":[{\"name\":\"Repository\",\"value\":\"${{ github.repository }}\"},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\"},{\"name\":\"Workflow Run\",\"value\":\"[View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}]}]}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      # 1Ô∏è‚É£1Ô∏è‚É£ Notify Discord on deployment failure
      - name: Notify Discord (Deployment Failed)
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"username\": \"CI/CD Bot\", \"embeds\": [{\"title\": \"‚ùå Deployment Failed\",\"color\": 15158332,\"fields\":[{\"name\":\"Repository\",\"value\":\"${{ github.repository }}\"},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\"},{\"name\":\"Workflow Run\",\"value\":\"[View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}]}]}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
