name: Build & Deploy React to Cloudflare Pages

on:
  push:
    branches:
      - main  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20


      - name: Run Semgrep SAST (Docker, full repo with login)
        id: semgrep
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/src" \
            -e SEMGREP_NO_METRICS=1 \
            -e SEMGREP_APP_TOKEN=${{ secrets.SEMGREP_APP_TOKEN }} \
            semgrep/semgrep:latest \
            semgrep scan \
              --config https://semgrep.dev/p/javascript \
              --config https://semgrep.dev/p/react \
              --config https://semgrep.dev/p/security-audit \
              --json \
              --output /src/semgrep-results.json || true



  
      # Notify Discord with  Semgrep Results
      - name: Notify Discord (Semgrep Results) 
        run: |
          findings=$(jq '.results | length' semgrep-results.json)
          rules=$(jq '.scan.rules_count' semgrep-results.json // "N/A")
          targets=$(jq '.scan.targets_count' semgrep-results.json // "N/A")

          summary="No issues found"
          color=3066993
          if [ "$findings" -gt 0 ]; then
            summary="$findings issue(s) found"
            color=15158332
          fi

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{
              \"username\": \"CI/CD Bot\",
              \"embeds\": [{
                \"title\": \"ðŸ›¡ Semgrep Scan Report\",
                \"color\": $color,
                \"fields\": [
                  {\"name\":\"Repository\",\"value\":\"${{ github.repository }}\"},
                  {\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\"},
                  {\"name\":\"Rules Run\",\"value\":\"$rules\"},
                  {\"name\":\"Targets Scanned\",\"value\":\"$targets\"},
                  {\"name\":\"Findings\",\"value\":\"$findings\"},
                  {\"name\":\"Summary\",\"value\":\"$summary\"},
                  {\"name\":\"Workflow Run\",\"value\":\"[View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}
                ]
              }]
            }" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}



      # Notify Discord when build starts
      - name: Notify Discord (Build Started)
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"username\": \"CI/CD Bot\", \"embeds\": [{\"title\": \" Build Started\",\"color\": 3447003,\"fields\":[{\"name\":\"Repository\",\"value\":\"${{ github.repository }}\"},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\"},{\"name\":\"Workflow Run\",\"value\":\"[View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}]}]}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Install dependencies
        run: npm install

      - name: Build React app
        run: |
          export NODE_OPTIONS=--openssl-legacy-provider
          npm run build

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.CF_PROJECT_NAME }}
          directory: ./build

      # Notify Discord on success
      - name: Notify Discord (Success)
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"username\": \"CI/CD Bot\", \"embeds\": [{\"title\": \"Deployment Successful\",\"color\": 3066993,\"fields\":[{\"name\":\"Repository\",\"value\":\"${{ github.repository }}\"},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\"},{\"name\":\"Status\",\"value\":\"Success\"},{\"name\":\"Workflow Run\",\"value\":\"[View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}]}]}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      # Notify Discord on failure
      - name: Notify Discord (Failure)
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"username\": \"CI/CD Bot\", \"embeds\": [{\"title\": \" Deployment Failed\",\"color\": 15158332,\"fields\":[{\"name\":\"Repository\",\"value\":\"${{ github.repository }}\"},{\"name\":\"Branch\",\"value\":\"${{ github.ref_name }}\"},{\"name\":\"Status\",\"value\":\"Failed\"},{\"name\":\"Workflow Run\",\"value\":\"[View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}]}]}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
