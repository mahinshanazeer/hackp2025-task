name: Build, Scan & Deploy React to Cloudflare Pages

on:
  push:
    branches: [ main ]

jobs:
  # -------------------------
  # Semgrep Security Scan
  # -------------------------
  semgrep-scan:
    runs-on: ubuntu-latest
    outputs:
      scan-status: ${{ steps.set-status.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Semgrep CLI
        run: |
          curl -sSL https://github.com/returntocorp/semgrep/releases/download/v1.46.0/semgrep-linux-amd64-v1.46.0 -o semgrep
          chmod +x semgrep
          sudo mv semgrep /usr/local/bin/

      - name: Run Semgrep scan
        run: semgrep scan --config auto --json > semgrep-report.json || true

      - name: Extract Semgrep summary
        run: |
          if [ -s semgrep-report.json ]; then
            jq -r '.results[] | "\(.check_id): \(.path):\(.start.line) - \(.extra.message)"' semgrep-report.json > semgrep-summary.txt
          else
            echo "‚úÖ No issues found" > semgrep-summary.txt
          fi

      - name: Upload Semgrep summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-summary
          path: semgrep-summary.txt

      - name: Set job status output
        id: set-status
        run: echo "status=completed" >> $GITHUB_OUTPUT

  # -------------------------
  # Build React App
  # -------------------------
  build-app:
    runs-on: ubuntu-latest
    needs: semgrep-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build React app
        run: |
          export NODE_OPTIONS=--openssl-legacy-provider
          npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  # -------------------------
  # Deploy React App
  # -------------------------
  deploy-app:
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v2
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.CF_PROJECT_NAME }}
          directory: ./build

  # -------------------------
  # Discord Notification
  # -------------------------
  notify-discord:
    runs-on: ubuntu-latest
    needs: [semgrep-scan, build-app, deploy-app]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Semgrep summary
        uses: actions/download-artifact@v4
        with:
          name: semgrep-summary
          path: ./semgrep

      - name: Prepare Discord variables
        run: |
          SUMMARY_FILE="./semgrep/semgrep-summary.txt"
          SUMMARY=$(cat "$SUMMARY_FILE")
          COLOR=3066993  # üü¢ Green by default
          if ! grep -q "‚úÖ No issues found" "$SUMMARY_FILE"; then
            COLOR=15158332  # üî¥ Red if issues exist
          fi

          NOW=$(date +"%Y-%m-%d %H:%M:%S %Z")
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"

          echo "SEMGRP_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "SEMGRP_COLOR=$COLOR" >> $GITHUB_ENV
          echo "RUN_DATETIME=$NOW" >> $GITHUB_ENV
          echo "COMMIT_URL=$REPO_URL" >> $GITHUB_ENV

      - name: Send Discord notification
        uses: rjstone/discord-webhook-notify@v2.2.1
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "üöÄ Build & Deploy Report"
          description: |
            **Branch**: `${{ github.ref_name }}`
            **Commit**: [${{ github.sha }}](${{ env.COMMIT_URL }})
            **Semgrep Status**: `${{ needs.semgrep-scan.outputs.scan-status }}`
            **Build Status**: ${{ needs.build-app.result }}
            **Deploy Status**: ${{ needs.deploy-app.result }}
            **Date/Time**: `${{ env.RUN_DATETIME }}`
          text: |
            üîç **Semgrep Findings**:
            ```
            ${{ env.SEMGRP_SUMMARY }}
            ```
          color: "${{ env.SEMGRP_COLOR }}"
